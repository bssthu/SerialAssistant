//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace BloodPressureViewer.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        /// <summary>
        /// 接收的数据按十六进制显示
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("接收的数据按十六进制显示")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool useGetHex {
            get {
                return ((bool)(this["useGetHex"]));
            }
            set {
                this["useGetHex"] = value;
            }
        }
        
        /// <summary>
        /// 选中的波特率的Index
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("选中的波特率的Index")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2")]
        public int baudRateIndex {
            get {
                return ((int)(this["baudRateIndex"]));
            }
            set {
                this["baudRateIndex"] = value;
            }
        }
        
        /// <summary>
        /// 串口校验方式
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("串口校验方式")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("None")]
        public global::System.IO.Ports.Parity parity {
            get {
                return ((global::System.IO.Ports.Parity)(this["parity"]));
            }
            set {
                this["parity"] = value;
            }
        }
        
        /// <summary>
        /// 选中的数据位的Index
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("选中的数据位的Index")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int dataBitsIndex {
            get {
                return ((int)(this["dataBitsIndex"]));
            }
            set {
                this["dataBitsIndex"] = value;
            }
        }
        
        /// <summary>
        /// 选中的停止位的Index
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("选中的停止位的Index")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int stopBitsIndex {
            get {
                return ((int)(this["stopBitsIndex"]));
            }
            set {
                this["stopBitsIndex"] = value;
            }
        }
        
        /// <summary>
        /// 串口名
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("串口名")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("COM1")]
        public string portName {
            get {
                return ((string)(this["portName"]));
            }
            set {
                this["portName"] = value;
            }
        }
        
        /// <summary>
        /// 窗口大小
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("窗口大小")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("430, 345")]
        public global::System.Drawing.Size windowSize {
            get {
                return ((global::System.Drawing.Size)(this["windowSize"]));
            }
            set {
                this["windowSize"] = value;
            }
        }
        
        /// <summary>
        /// 窗口距屏幕左边距离
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("窗口距屏幕左边距离")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        public int windowLeft {
            get {
                return ((int)(this["windowLeft"]));
            }
            set {
                this["windowLeft"] = value;
            }
        }
        
        /// <summary>
        /// 窗口距屏幕顶部距离
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("窗口距屏幕顶部距离")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        public int windowTop {
            get {
                return ((int)(this["windowTop"]));
            }
            set {
                this["windowTop"] = value;
            }
        }
        
        /// <summary>
        /// 发送的数据理解为十六进制发送
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("发送的数据理解为十六进制发送")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool useSendHex {
            get {
                return ((bool)(this["useSendHex"]));
            }
            set {
                this["useSendHex"] = value;
            }
        }
        
        /// <summary>
        /// 窗口状态（最大化？）
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("窗口状态（最大化？）")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Normal")]
        public global::System.Windows.Forms.FormWindowState windowState {
            get {
                return ((global::System.Windows.Forms.FormWindowState)(this["windowState"]));
            }
            set {
                this["windowState"] = value;
            }
        }
        
        /// <summary>
        /// 启动时打开串口
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("启动时打开串口")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool autoStartSP {
            get {
                return ((bool)(this["autoStartSP"]));
            }
            set {
                this["autoStartSP"] = value;
            }
        }
        
        /// <summary>
        /// 选中的标签页为“串口助手”
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("选中的标签页为“串口助手”")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("tabPageSerialPort")]
        public string selectedTabpageName {
            get {
                return ((string)(this["selectedTabpageName"]));
            }
            set {
                this["selectedTabpageName"] = value;
            }
        }
        
        /// <summary>
        /// 将串口接收到的数据存入文件
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("将串口接收到的数据存入文件")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool writeRcv {
            get {
                return ((bool)(this["writeRcv"]));
            }
            set {
                this["writeRcv"] = value;
            }
        }
        
        /// <summary>
        /// 一收到数据就刷新显示
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("一收到数据就刷新显示")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool fastRefresh {
            get {
                return ((bool)(this["fastRefresh"]));
            }
            set {
                this["fastRefresh"] = value;
            }
        }
        
        /// <summary>
        /// 记录滤波后的数据
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("记录滤波后的数据")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool writePulse {
            get {
                return ((bool)(this["writePulse"]));
            }
            set {
                this["writePulse"] = value;
            }
        }
        
        /// <summary>
        /// 退出前是否询问
        /// </summary>
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Configuration.SettingsDescriptionAttribute("退出前是否询问")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool askClose {
            get {
                return ((bool)(this["askClose"]));
            }
            set {
                this["askClose"] = value;
            }
        }
    }
}
